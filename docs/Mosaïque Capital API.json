{
	"info": {
		"_postman_id": "mosaique-capital-simple",
		"name": "üèõÔ∏è Mosa√Øque Capital API - Collection Simplifi√©e",
		"description": "Collection structur√©e avec donn√©es statiques et gestion automatique du token JWT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Signup - Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User created or already exists', function () {",
									"    pm.expect([201, 409]).to.include(pm.response.code);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    console.log('‚úÖ User created successfully');",
									"} else {",
									"    console.log('‚ÑπÔ∏è User already exists');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser_mosaique\",\n    \"email\": \"test.mosaique@example.com\",\n    \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/auth/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "Login - Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Automatically store JWT token",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.globals.set('jwt_token', responseJson.accessToken);",
									"    console.log('üîë Token automatically stored');",
									"    console.log('üë§ User:', responseJson.username);",
									"    console.log('üîê MFA Enabled:', responseJson.mfaEnabled);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser_mosaique\",\n    \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "Get Current User Info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/auth/me",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.globals.set('jwt_token', responseJson.accessToken);",
									"    console.log('üîÑ Token refreshed and stored');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"YOUR_REFRESH_TOKEN_HERE\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/auth/refresh",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					}
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					}
				}
			]
		},
		{
			"name": "üîê MFA (Two-Factor Authentication)",
			"item": [
				{
					"name": "Setup MFA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/mfa/setup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"setup"
							]
						}
					}
				},
				{
					"name": "Download QR Code",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/mfa/qrcode",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"qrcode"
							]
						}
					}
				},
				{
					"name": "Verify MFA Code",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"123456\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/mfa/verify",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"verify"
							]
						}
					}
				},
				{
					"name": "Check MFA Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/mfa/status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"status"
							]
						}
					}
				},
				{
					"name": "Validate MFA Code",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"123456\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/mfa/validate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"validate"
							]
						}
					}
				},
				{
					"name": "Disable MFA",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentMfaCode\": \"123456\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/mfa/disable",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"disable"
							]
						}
					}
				},
				{
					"name": "Regenerate MFA Secret",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentMfaCode\": \"123456\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/mfa/regenerate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"mfa",
								"regenerate"
							]
						}
					}
				}
			]
		},
		{
			"name": "üí∞ Assets Management",
			"item": [
				{
					"name": "üìã Assets - Operations G√©n√©rales",
					"item": [
						{
							"name": "Get All Assets",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Get Asset by ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/1",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "1"]
								}
							}
						},
						{
							"name": "Delete Asset by ID",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/1",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "1"]
								}
							}
						}
					]
				},
				{
					"name": "üè† 1. Immobilier",
					"item": [
						{
							"name": "Create - REAL_ESTATE (G√©n√©ral)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Bien Immobilier G√©n√©ral\",\n    \"description\": \"Actif immobilier de cat√©gorie g√©n√©rale\",\n    \"type\": \"REAL_ESTATE\",\n    \"currentValue\": 300000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - REAL_ESTATE_RESIDENTIAL",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"R√©sidence Principale Paris 16√®me\",\n    \"description\": \"Appartement 4 pi√®ces, 85m¬≤, r√©sidence principale\",\n    \"type\": \"REAL_ESTATE_RESIDENTIAL\",\n    \"currentValue\": 650000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - REAL_ESTATE_RENTAL",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Appartement Locatif Lyon\",\n    \"description\": \"Studio 25m¬≤ centre Lyon, lou√© 650‚Ç¨/mois\",\n    \"type\": \"REAL_ESTATE_RENTAL\",\n    \"currentValue\": 180000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - REAL_ESTATE_COMMERCIAL",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Local Commercial Marseille\",\n    \"description\": \"Bureau 120m¬≤ zone d'activit√©, lou√© √† une entreprise\",\n    \"type\": \"REAL_ESTATE_COMMERCIAL\",\n    \"currentValue\": 420000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - REAL_ESTATE_LAND",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Terrain Constructible Bordeaux\",\n    \"description\": \"Terrain 800m¬≤ constructible, zone pavillonnaire\",\n    \"type\": \"REAL_ESTATE_LAND\",\n    \"currentValue\": 95000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - REAL_ESTATE_SCPI",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"SCPI Patrimmo Croissance\",\n    \"description\": \"Parts de SCPI diversifi√©e bureaux/commerces\",\n    \"type\": \"REAL_ESTATE_SCPI\",\n    \"currentValue\": 25000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Get Assets by Type - REAL_ESTATE",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/type/REAL_ESTATE?includeSubTypes=false",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "type", "REAL_ESTATE"]
								}
							}
						}
					]
				},
				{
					"name": "üíº 2. Actifs Financiers",
					"item": [
						{
							"name": "Create - FINANCIAL (G√©n√©ral)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Portefeuille Financier G√©n√©ral\",\n    \"description\": \"Actifs financiers divers non cat√©goris√©s\",\n    \"type\": \"FINANCIAL\",\n    \"currentValue\": 50000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - FINANCIAL_STOCKS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Portefeuille Actions CAC 40\",\n    \"description\": \"Actions : LVMH, Sanofi, Total, BNP Paribas\",\n    \"type\": \"FINANCIAL_STOCKS\",\n    \"currentValue\": 35000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - FINANCIAL_BONDS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Obligations d'√âtat France\",\n    \"description\": \"OAT 10 ans et obligations europ√©ennes\",\n    \"type\": \"FINANCIAL_BONDS\",\n    \"currentValue\": 20000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - FINANCIAL_FUNDS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"ETF MSCI World\",\n    \"description\": \"Fonds indiciel diversifi√© international\",\n    \"type\": \"FINANCIAL_FUNDS\",\n    \"currentValue\": 28000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - FINANCIAL_LIFE_INSURANCE",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Assurance Vie Generali\",\n    \"description\": \"Contrat multisupport 70% UC / 30% fonds euros\",\n    \"type\": \"FINANCIAL_LIFE_INSURANCE\",\n    \"currentValue\": 45000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - FINANCIAL_PEA",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"PEA Actions Europ√©ennes\",\n    \"description\": \"Plan d'√âpargne Actions avec ETF Europe\",\n    \"type\": \"FINANCIAL_PEA\",\n    \"currentValue\": 32000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - FINANCIAL_RETIREMENT",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"PER Individuel\",\n    \"description\": \"Plan d'√âpargne Retraite avec abondement\",\n    \"type\": \"FINANCIAL_RETIREMENT\",\n    \"currentValue\": 18000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Get Assets by Type - FINANCIAL_STOCKS",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/type/FINANCIAL_STOCKS?includeSubTypes=false",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "type", "FINANCIAL_STOCKS"]
								}
							}
						}
					]
				},
				{
					"name": "üí∞ 3. Liquidit√©s",
					"item": [
						{
							"name": "Create - CASH (G√©n√©ral)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Liquidit√©s G√©n√©rales\",\n    \"description\": \"Ensemble des liquidit√©s disponibles\",\n    \"type\": \"CASH\",\n    \"currentValue\": 15000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - CASH_CURRENT",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Compte Courant BNP Paribas\",\n    \"description\": \"Compte de d√©p√¥t principal pour op√©rations courantes\",\n    \"type\": \"CASH_CURRENT\",\n    \"currentValue\": 8500,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - CASH_SAVINGS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Livret A + LDDS\",\n    \"description\": \"√âpargne r√©glement√©e : Livret A (22950‚Ç¨) + LDDS (12000‚Ç¨)\",\n    \"type\": \"CASH_SAVINGS\",\n    \"currentValue\": 34950,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - CASH_TERM",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Compte √† Terme 12 mois\",\n    \"description\": \"D√©p√¥t √† terme 3.2% net, √©ch√©ance d√©cembre 2025\",\n    \"type\": \"CASH_TERM\",\n    \"currentValue\": 50000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Get Assets by Type - CASH_SAVINGS",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/type/CASH_SAVINGS?includeSubTypes=false",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "type", "CASH_SAVINGS"]
								}
							}
						}
					]
				},
				{
					"name": "‚Çø 4. Cryptomonnaies",
					"item": [
						{
							"name": "Create - CRYPTOCURRENCY",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Portfolio Cryptomonnaies\",\n    \"description\": \"BTC (60%), ETH (30%), ADA (10%)\",\n    \"type\": \"CRYPTOCURRENCY\",\n    \"currentValue\": 15000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Update - CRYPTOCURRENCY",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Portfolio Crypto Diversifi√©\",\n    \"description\": \"BTC (50%), ETH (25%), ADA (15%), SOL (10%)\",\n    \"type\": \"CRYPTOCURRENCY\",\n    \"currentValue\": 18500,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets/1",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "1"]
								}
							}
						},
						{
							"name": "Get Assets by Type - CRYPTOCURRENCY",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/type/CRYPTOCURRENCY?includeSubTypes=false",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "type", "CRYPTOCURRENCY"]
								}
							}
						}
					]
				},
				{
					"name": "üé® 5. Autres Actifs",
					"item": [
						{
							"name": "Create - OTHERS (G√©n√©ral)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Autres Actifs Divers\",\n    \"description\": \"Actifs atypiques et collections diverses\",\n    \"type\": \"OTHERS\",\n    \"currentValue\": 12000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - OTHERS_ART",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Collection Tableaux Contemporains\",\n    \"description\": \"3 ≈ìuvres d'artistes √©mergents, expertis√©es\",\n    \"type\": \"OTHERS_ART\",\n    \"currentValue\": 8500,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - OTHERS_PRECIOUS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Lingots d'Or 1kg\",\n    \"description\": \"2 lingots or pur 999.9, stockage s√©curis√©\",\n    \"type\": \"OTHERS_PRECIOUS\",\n    \"currentValue\": 65000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - OTHERS_VEHICLES",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Tesla Model S Plaid\",\n    \"description\": \"V√©hicule √©lectrique haut de gamme, 2023, 15000km\",\n    \"type\": \"OTHERS_VEHICLES\",\n    \"currentValue\": 85000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Get Assets by Type - OTHERS_ART",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/type/OTHERS_ART?includeSubTypes=false",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "type", "OTHERS_ART"]
								}
							}
						}
					]
				},
				{
					"name": "üìâ 6. Passifs (Dettes)",
					"item": [
						{
							"name": "Create - LIABILITIES (G√©n√©ral)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dettes G√©n√©rales\",\n    \"description\": \"Ensemble des passifs et dettes\",\n    \"type\": \"LIABILITIES\",\n    \"currentValue\": 100000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - LIABILITIES_MORTGAGE",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cr√©dit Immobilier R√©sidence Principale\",\n    \"description\": \"Pr√™t 25 ans, taux 2.1%, reste 18 ans\",\n    \"type\": \"LIABILITIES_MORTGAGE\",\n    \"currentValue\": 285000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - LIABILITIES_CONSUMER",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cr√©dit Auto Tesla\",\n    \"description\": \"Financement v√©hicule sur 5 ans, taux 3.5%\",\n    \"type\": \"LIABILITIES_CONSUMER\",\n    \"currentValue\": 35000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - LIABILITIES_STUDENT",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Pr√™t √âtudiant Master\",\n    \"description\": \"Financement √©tudes sup√©rieures, taux pr√©f√©rentiel 1.2%\",\n    \"type\": \"LIABILITIES_STUDENT\",\n    \"currentValue\": 12000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Create - LIABILITIES_OTHER",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dette Familiale\",\n    \"description\": \"Avance famille pour apport immobilier, remboursement flexible\",\n    \"type\": \"LIABILITIES_OTHER\",\n    \"currentValue\": 25000,\n    \"currency\": \"EUR\"\n}"
								},
								"url": {
									"raw": "http://localhost:9999/api/assets",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets"]
								}
							}
						},
						{
							"name": "Get Assets by Type - LIABILITIES_MORTGAGE",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "http://localhost:9999/api/assets/type/LIABILITIES_MORTGAGE?includeSubTypes=false",
									"protocol": "http",
									"host": ["localhost"],
									"port": "9999",
									"path": ["api", "assets", "type", "LIABILITIES_MORTGAGE"]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "üìä Valuations",
			"item": [
				{
					"name": "Get Valuations for Asset",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/valuations/asset/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"valuations",
								"asset",
								"1"
							]
						}
					}
				},
				{
					"name": "Get Valuations by Date Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/valuations/asset/1/range?startDate=2024-01-01&endDate=2024-12-31",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"valuations",
								"asset",
								"1",
								"range"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2024-01-01"
								},
								{
									"key": "endDate",
									"value": "2024-12-31"
								}
							]
						}
					}
				},
				{
					"name": "Get Valuation by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/valuations/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"valuations",
								"1"
							]
						}
					}
				},
				{
					"name": "Create Valuation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assetId\": 1,\n    \"valuationDate\": \"2024-06-01\",\n    \"value\": 460000,\n    \"currency\": \"EUR\",\n    \"source\": \"Estimation notaire\"\n}"
						},
						"url": {
							"raw": "http://localhost:9999/api/valuations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"valuations"
							]
						}
					}
				},
				{
					"name": "Delete Valuation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/valuations/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"valuations",
								"1"
							]
						}
					}
				}
			]
		},
		{
			"name": "üè¶ Banking API - Agr√©gation Bancaire",
			"description": "API compl√®te d'agr√©gation bancaire avec support Budget Insight, Bridge API, Linxo Connect",
			"item": [
				{
					"name": "üîç 1. Providers & Discovery",
					"description": "D√©couverte des providers disponibles et configuration",
					"item": [
						{
							"name": "Get Available Banking Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Providers list retrieved', function () {",
											"    pm.response.to.have.status(200);",
											"    const providers = pm.response.json();",
											"    pm.expect(providers).to.be.an('array');",
											"    pm.expect(providers.length).to.be.above(0);",
											"});",
											"",
											"pm.test('Budget Insight available', function () {",
											"    const providers = pm.response.json();",
											"    const budgetInsight = providers.find(p => p.code === 'budget-insight');",
											"    pm.expect(budgetInsight).to.not.be.undefined;",
											"    pm.expect(budgetInsight.name).to.include('Budget Insight');",
											"});",
											"",
											"pm.test('Bridge API available', function () {",
											"    const providers = pm.response.json();",
											"    const bridge = providers.find(p => p.code === 'bridge-api');",
											"    pm.expect(bridge).to.not.be.undefined;",
											"    pm.expect(bridge.name).to.include('Bridge');",
											"});",
											"",
											"// Store available providers for later use",
											"if (pm.response.code === 200) {",
											"    const providers = pm.response.json();",
											"    pm.globals.set('available_providers', JSON.stringify(providers));",
											"    console.log('üìã Available providers:', providers.map(p => p.name).join(', '));",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/banking/providers",
									"host": ["{{base_url}}"],
									"path": ["api", "banking", "providers"]
								}
							}
						},
						{
							"name": "Check Provider Health Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Health check successful', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const providers = JSON.parse(pm.globals.get('available_providers') || '[]');",
											"providers.forEach(provider => {",
											"    pm.test(`Provider ${provider.name} health status available`, function() {",
											"        pm.expect(provider).to.have.property('available');",
											"    });",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/banking/providers",
									"host": ["{{base_url}}"],
									"path": ["api", "banking", "providers"]
								}
							}
						}
					]
				},
				{
					"name": "üîó 2. Connections Management",
					"description": "Gestion des connexions bancaires avec diff√©rents providers",
					"item": [
						{
							"name": "üì± Mock Provider (Development)",
							"item": [
								{
									"name": "Initiate Mock Connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Mock connection initiated', function () {",
													"    pm.expect([201, 400]).to.include(pm.response.code);",
													"});",
													"",
													"if (pm.response.code === 201) {",
													"    const response = pm.response.json();",
													"    pm.globals.set('mock_connection_id', response.id);",
													"    pm.globals.set('active_connection_id', response.id);",
													"    console.log('üîó Mock connection created with ID:', response.id);",
													"    console.log('üìä Status:', response.connectionStatus);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"mock\",\n    \"bankCredentials\": {\n        \"login\": \"demo_user_mock\",\n        \"password\": \"mock_secure_password_123\",\n        \"additionalField1\": \"optional_field\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Confirm Mock Connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Mock connection confirmed', function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    pm.expect(response.connectionStatus).to.eql('ACTIVE');",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"confirmationCode\": \"123456\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{mock_connection_id}}/confirm",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{mock_connection_id}}", "confirm"]
										}
									}
								}
							]
						},
						{
							"name": "üèõÔ∏è Budget Insight (Powens)",
							"item": [
								{
									"name": "Initiate Budget Insight - Cr√©dit Agricole",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Budget Insight connection initiated', function () {",
													"    pm.expect([201, 400]).to.include(pm.response.code);",
													"});",
													"",
													"if (pm.response.code === 201) {",
													"    const response = pm.response.json();",
													"    pm.globals.set('bi_connection_id', response.id);",
													"    console.log('üèõÔ∏è Budget Insight connection:', response.connectionId);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"budget-insight\",\n    \"bankCredentials\": {\n        \"login\": \"demo.user@creditagricole.fr\",\n        \"password\": \"Demo_CA_Password_123!\",\n        \"additionalField1\": \"123456\",\n        \"extraFields\": {\n            \"birthdate\": \"1985-06-15\",\n            \"phone\": \"0601234567\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Initiate Budget Insight - BNP Paribas",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"budget-insight\",\n    \"bankCredentials\": {\n        \"login\": \"demo.user@bnpparibas.net\",\n        \"password\": \"Demo_BNP_Password_123!\",\n        \"additionalField1\": \"987654\",\n        \"extraFields\": {\n            \"customerNumber\": \"12345678\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Confirm Budget Insight Connection (SCA)",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"confirmationCode\": \"987654\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{bi_connection_id}}/confirm",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{bi_connection_id}}", "confirm"]
										}
									}
								}
							]
						},
						{
							"name": "üåâ Bridge API",
							"item": [
								{
									"name": "Initiate Bridge API - Soci√©t√© G√©n√©rale",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 201) {",
													"    const response = pm.response.json();",
													"    pm.globals.set('bridge_connection_id', response.id);",
													"    console.log('üåâ Bridge API connection:', response.connectionId);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"bridge-api\",\n    \"bankCredentials\": {\n        \"login\": \"demo.user@societegenerale.fr\",\n        \"password\": \"Demo_SG_Password_123!\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Initiate Bridge API - LCL",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"bridge-api\",\n    \"bankCredentials\": {\n        \"login\": \"demo.user@lcl.fr\",\n        \"password\": \"Demo_LCL_Password_123!\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Confirm Bridge API Connection",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"confirmationCode\": \"456789\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{bridge_connection_id}}/confirm",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{bridge_connection_id}}", "confirm"]
										}
									}
								}
							]
						},
						{
							"name": "üè¶ Linxo Connect",
							"item": [
								{
									"name": "Initiate Linxo - Cr√©dit Mutuel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 201) {",
													"    const response = pm.response.json();",
													"    pm.globals.set('linxo_connection_id', response.id);",
													"    console.log('üè¶ Linxo connection:', response.connectionId);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"linxo-connect\",\n    \"bankCredentials\": {\n        \"login\": \"demo.user@creditmutuel.fr\",\n        \"password\": \"Demo_CM_Password_123!\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Confirm Linxo Connection",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"confirmationCode\": \"789123\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{linxo_connection_id}}/confirm",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{linxo_connection_id}}", "confirm"]
										}
									}
								}
							]
						},
						{
							"name": "üìã Connection Operations",
							"item": [
								{
									"name": "List All Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Connections list retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const connections = pm.response.json();",
													"    pm.expect(connections).to.be.an('array');",
													"});",
													"",
													"// Store first active connection for subsequent tests",
													"if (pm.response.code === 200) {",
													"    const connections = pm.response.json();",
													"    const activeConnection = connections.find(c => c.connectionStatus === 'ACTIVE');",
													"    if (activeConnection) {",
													"        pm.globals.set('active_connection_id', activeConnection.id);",
													"        console.log('üîó Active connection found:', activeConnection.id);",
													"    }",
													"    ",
													"    // Log connection summary",
													"    const summary = connections.reduce((acc, conn) => {",
													"        acc[conn.connectionStatus] = (acc[conn.connectionStatus] || 0) + 1;",
													"        return acc;",
													"    }, {});",
													"    console.log('üìä Connections summary:', summary);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "Get Connection Details",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{active_connection_id}}",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{active_connection_id}}"]
										}
									}
								},
								{
									"name": "Check Connection Health",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Health check response structure', function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property('healthy');",
													"    pm.expect(response).to.have.property('status');",
													"    pm.expect(response).to.have.property('checkedAt');",
													"});",
													"",
													"const health = pm.response.json();",
													"console.log('üè• Connection health:', health.healthy ? '‚úÖ Healthy' : '‚ùå Unhealthy');",
													"console.log('üìä Status:', health.status);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{active_connection_id}}/health",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{active_connection_id}}", "health"]
										}
									}
								}
							]
						}
					]
				},
				{
					"name": "üí≥ 3. Accounts Management",
					"description": "Gestion et consultation des comptes bancaires",
					"item": [
						{
							"name": "üìä Account Discovery",
							"item": [
								{
									"name": "Get All Bank Accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Bank accounts retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const accounts = pm.response.json();",
													"    pm.expect(accounts).to.be.an('array');",
													"});",
													"",
													"if (pm.response.code === 200) {",
													"    const accounts = pm.response.json();",
													"    ",
													"    // Store account IDs for later use",
													"    if (accounts.length > 0) {",
													"        pm.globals.set('primary_account_id', accounts[0].id);",
													"        ",
													"        // Find different account types",
													"        const checkingAccount = accounts.find(a => a.type === 'checking');",
													"        const savingsAccount = accounts.find(a => a.type === 'savings');",
													"        ",
													"        if (checkingAccount) pm.globals.set('checking_account_id', checkingAccount.id);",
													"        if (savingsAccount) pm.globals.set('savings_account_id', savingsAccount.id);",
													"    }",
													"    ",
													"    // Log account summary",
													"    console.log(`üí≥ Total accounts: ${accounts.length}`);",
													"    const accountsByType = accounts.reduce((acc, account) => {",
													"        acc[account.type] = (acc[account.type] || 0) + 1;",
													"        return acc;",
													"    }, {});",
													"    console.log('üìä Accounts by type:', accountsByType);",
													"    ",
													"    const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);",
													"    console.log(`üí∞ Total balance: ${totalBalance.toFixed(2)} EUR`);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/accounts",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "accounts"]
										}
									}
								},
								{
									"name": "Get Accounts by Connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Connection accounts retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const accounts = pm.response.json();",
													"    pm.expect(accounts).to.be.an('array');",
													"});",
													"",
													"const accounts = pm.response.json();",
													"console.log(`üîó Accounts for connection: ${accounts.length}`);",
													"accounts.forEach((account, index) => {",
													"    console.log(`  ${index + 1}. ${account.name} (${account.type}) - ${account.balance} ${account.currency}`);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{active_connection_id}}/accounts",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{active_connection_id}}", "accounts"]
										}
									}
								},
								{
									"name": "Get Account Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Account details retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const account = pm.response.json();",
													"    pm.expect(account).to.have.property('id');",
													"    pm.expect(account).to.have.property('name');",
													"    pm.expect(account).to.have.property('balance');",
													"    pm.expect(account).to.have.property('type');",
													"});",
													"",
													"const account = pm.response.json();",
													"console.log(`üí≥ Account: ${account.name}`);",
													"console.log(`üí∞ Balance: ${account.balance} ${account.currency}`);",
													"console.log(`üè¶ Type: ${account.type}`);",
													"if (account.iban) console.log(`üî¢ IBAN: ${account.iban}`);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/accounts/{{primary_account_id}}",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "accounts", "{{primary_account_id}}"]
										}
									}
								}
							]
						},
						{
							"name": "üìà Financial Summary",
							"item": [
								{
									"name": "Get Global Financial Summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Financial summary retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const summary = pm.response.json();",
													"    pm.expect(summary).to.have.property('totalBalance');",
													"    pm.expect(summary).to.have.property('totalAssets');",
													"    pm.expect(summary).to.have.property('totalLiabilities');",
													"    pm.expect(summary).to.have.property('netWorth');",
													"});",
													"",
													"const summary = pm.response.json();",
													"console.log('üìä R√âSUM√â FINANCIER GLOBAL');",
													"console.log('=' .repeat(35));",
													"console.log(`üí∞ Solde total: ${summary.totalBalance} EUR`);",
													"console.log(`üìà Total actifs: ${summary.totalAssets} EUR`);",
													"console.log(`üìâ Total passifs: ${summary.totalLiabilities} EUR`);",
													"console.log(`üíé Patrimoine net: ${summary.netWorth} EUR`);",
													"console.log(`üè¶ Nombre de comptes: ${summary.totalAccounts}`);",
													"",
													"if (summary.balanceByType) {",
													"    console.log('\\nüí≥ R√©partition par type:');",
													"    Object.entries(summary.balanceByType).forEach(([type, balance]) => {",
													"        console.log(`  ‚Ä¢ ${type}: ${balance} EUR`);",
													"    });",
													"}",
													"",
													"if (summary.monthlyIncome || summary.monthlyExpenses) {",
													"    console.log('\\nüìä Cash Flow mensuel:');",
													"    console.log(`  ‚¨ÜÔ∏è Revenus: ${summary.monthlyIncome} EUR`);",
													"    console.log(`  ‚¨áÔ∏è D√©penses: ${summary.monthlyExpenses} EUR`);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/summary",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "summary"]
										}
									}
								}
							]
						},
						{
							"name": "üîÑ Synchronization",
							"item": [
								{
									"name": "Sync Specific Connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Sync completed', function () {",
													"    pm.response.to.have.status(200);",
													"    const syncResult = pm.response.json();",
													"    pm.expect(syncResult).to.have.property('success');",
													"    pm.expect(syncResult).to.have.property('accountsSynced');",
													"    pm.expect(syncResult).to.have.property('transactionsSynced');",
													"});",
													"",
													"const syncResult = pm.response.json();",
													"if (syncResult.success) {",
													"    console.log('‚úÖ Synchronisation r√©ussie');",
													"    console.log(`üìä Comptes synchronis√©s: ${syncResult.accountsSynced}`);",
													"    console.log(`üí∞ Transactions synchronis√©es: ${syncResult.transactionsSynced}`);",
													"    ",
													"    if (syncResult.statistics) {",
													"        const stats = syncResult.statistics;",
													"        console.log('\\nüìà Statistiques d√©taill√©es:');",
													"        console.log(`  ‚Ä¢ Nouveaux comptes: ${stats.newAccounts || 0}`);",
													"        console.log(`  ‚Ä¢ Comptes mis √† jour: ${stats.updatedAccounts || 0}`);",
													"        console.log(`  ‚Ä¢ Nouvelles transactions: ${stats.newTransactions || 0}`);",
													"        console.log(`  ‚Ä¢ Transactions cat√©goris√©es: ${stats.categorizedTransactions || 0}`);",
													"    }",
													"} else {",
													"    console.log('‚ùå √âchec de synchronisation:', syncResult.message);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{active_connection_id}}/sync",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{active_connection_id}}", "sync"]
										}
									}
								},
								{
									"name": "Sync All Active Connections",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Bulk sync completed', function () {",
													"    pm.response.to.have.status(200);",
													"    const syncResults = pm.response.json();",
													"    pm.expect(syncResults).to.be.an('array');",
													"});",
													"",
													"const syncResults = pm.response.json();",
													"console.log(`üîÑ Synchronisation de ${syncResults.length} connexions`);",
													"",
													"let totalAccounts = 0, totalTransactions = 0;",
													"syncResults.forEach((result, index) => {",
													"    const status = result.success ? '‚úÖ' : '‚ùå';",
													"    console.log(`${status} Connexion ${result.connectionId}: ${result.accountsSynced} comptes, ${result.transactionsSynced} transactions`);",
													"    ",
													"    if (result.success) {",
													"        totalAccounts += result.accountsSynced;",
													"        totalTransactions += result.transactionsSynced;",
													"    }",
													"});",
													"",
													"console.log('\\nüìä TOTAL SYNCHRONIS√â:');",
													"console.log(`  üìä Comptes: ${totalAccounts}`);",
													"console.log(`  üí∞ Transactions: ${totalTransactions}`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/sync-all",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "sync-all"]
										}
									}
								}
							]
						}
					]
				},
				{
					"name": "üí∞ 4. Transactions & Analytics",
					"description": "Gestion des transactions et analyses financi√®res",
					"item": [
						{
							"name": "üîç Transaction Search",
							"item": [
								{
									"name": "Search All Recent Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Transactions search successful', function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property('content');",
													"    pm.expect(response).to.have.property('totalElements');",
													"    pm.expect(response.content).to.be.an('array');",
													"});",
													"",
													"const response = pm.response.json();",
													"if (response.content.length > 0) {",
													"    pm.globals.set('sample_transaction_id', response.content[0].id);",
													"    ",
													"    console.log(`üîç Trouv√© ${response.totalElements} transactions`);",
													"    console.log(`üìÑ Page actuelle: ${response.content.length} transactions`);",
													"    ",
													"    // Show first few transactions",
													"    console.log('\\nüí∞ Derni√®res transactions:');",
													"    response.content.slice(0, 5).forEach((tx, index) => {",
													"        const amount = tx.amount > 0 ? `+${tx.amount}` : `${tx.amount}`;",
													"        const type = tx.amount > 0 ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è';",
													"        console.log(`  ${index + 1}. ${type} ${amount} EUR - ${tx.description} (${tx.transactionDate})`);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"page\": 0,\n    \"size\": 50,\n    \"sortBy\": \"transactionDate\",\n    \"sortDirection\": \"DESC\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/search",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "search"]
										}
									}
								},
								{
									"name": "Search Debit Transactions > 100‚Ç¨",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"page\": 0,\n    \"size\": 25,\n    \"sortBy\": \"amount\",\n    \"sortDirection\": \"ASC\",\n    \"type\": \"DEBIT\",\n    \"minAmount\": -10000,\n    \"maxAmount\": -100,\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/search",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "search"]
										}
									}
								},
								{
									"name": "Search Transactions by Category",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"page\": 0,\n    \"size\": 30,\n    \"category\": \"alimentation\",\n    \"type\": \"DEBIT\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-12-31\",\n    \"sortBy\": \"transactionDate\",\n    \"sortDirection\": \"DESC\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/search",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "search"]
										}
									}
								},
								{
									"name": "Search by Description Pattern",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"page\": 0,\n    \"size\": 20,\n    \"description\": \"CARTE\",\n    \"startDate\": \"2024-06-01\",\n    \"endDate\": \"2024-06-30\",\n    \"sortBy\": \"amount\",\n    \"sortDirection\": \"ASC\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/search",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "search"]
										}
									}
								}
							]
						},
						{
							"name": "üí≥ Account Transactions",
							"item": [
								{
									"name": "Get Recent Account Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Account transactions retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property('content');",
													"    pm.expect(response).to.have.property('totalElements');",
													"});",
													"",
													"const response = pm.response.json();",
													"console.log(`üí≥ Transactions du compte: ${response.totalElements}`);",
													"",
													"if (response.content.length > 0) {",
													"    const transactions = response.content;",
													"    const totalDebit = transactions.filter(t => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);",
													"    const totalCredit = transactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);",
													"    ",
													"    console.log(`üí∞ Cr√©dits: +${totalCredit.toFixed(2)} EUR`);",
													"    console.log(`üí∏ D√©bits: -${totalDebit.toFixed(2)} EUR`);",
													"    console.log(`üìä Solde p√©riode: ${(totalCredit - totalDebit).toFixed(2)} EUR`);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/accounts/{{primary_account_id}}/transactions?page=0&size=50&sortBy=transactionDate&sortDir=DESC",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "accounts", "{{primary_account_id}}", "transactions"],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "50"
												},
												{
													"key": "sortBy",
													"value": "transactionDate"
												},
												{
													"key": "sortDir",
													"value": "DESC"
												}
											]
										}
									}
								},
								{
									"name": "Get Checking Account Transactions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/accounts/{{checking_account_id}}/transactions?page=0&size=30&sortBy=transactionDate&sortDir=DESC",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "accounts", "{{checking_account_id}}", "transactions"],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "30"
												},
												{
													"key": "sortBy",
													"value": "transactionDate"
												},
												{
													"key": "sortDir",
													"value": "DESC"
												}
											]
										}
									}
								}
							]
						},
						{
							"name": "üè∑Ô∏è Transaction Management",
							"item": [
								{
									"name": "Get Transaction Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Transaction details retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const transaction = pm.response.json();",
													"    pm.expect(transaction).to.have.property('id');",
													"    pm.expect(transaction).to.have.property('amount');",
													"    pm.expect(transaction).to.have.property('description');",
													"});",
													"",
													"const tx = pm.response.json();",
													"console.log('üí∞ D√âTAILS TRANSACTION');",
													"console.log('=' .repeat(25));",
													"console.log(`üÜî ID: ${tx.id}`);",
													"console.log(`üíµ Montant: ${tx.amount} ${tx.currency}`);",
													"console.log(`üìù Description: ${tx.description}`);",
													"console.log(`üìÖ Date: ${tx.transactionDate}`);",
													"console.log(`üè∑Ô∏è Cat√©gorie: ${tx.category || 'Non cat√©goris√©e'}`);",
													"console.log(`üîÑ Type: ${tx.type || 'N/A'}`);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/{{sample_transaction_id}}",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "{{sample_transaction_id}}"]
										}
									}
								},
								{
									"name": "Update Transaction Category - Alimentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Category updated successfully', function () {",
													"    pm.response.to.have.status(200);",
													"    const transaction = pm.response.json();",
													"    pm.expect(transaction.category).to.eql('alimentation');",
													"});",
													"",
													"console.log('‚úÖ Cat√©gorie mise √† jour: alimentation');"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\": \"alimentation\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/{{sample_transaction_id}}/category",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "{{sample_transaction_id}}", "category"]
										}
									}
								},
								{
									"name": "Update Transaction Category - Transport",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\": \"transport\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/{{sample_transaction_id}}/category",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "{{sample_transaction_id}}", "category"]
										}
									}
								}
							]
						},
						{
							"name": "üìä Financial Analytics",
							"item": [
								{
									"name": "Get Expenses by Category (Current Year)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Category statistics retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const stats = pm.response.json();",
													"    pm.expect(stats).to.have.property('categoryExpenses');",
													"    pm.expect(stats).to.have.property('totalExpenses');",
													"});",
													"",
													"const stats = pm.response.json();",
													"console.log('üìä ANALYSE DES D√âPENSES PAR CAT√âGORIE');",
													"console.log('=' .repeat(45));",
													"console.log(`üìÖ P√©riode: ${stats.period.startDate} ‚Üí ${stats.period.endDate}`);",
													"console.log(`üí∏ Total d√©penses: ${stats.totalExpenses} EUR`);",
													"console.log(`üìà Moyenne journali√®re: ${stats.averageDailyExpense} EUR`);",
													"",
													"if (stats.categoryExpenses) {",
													"    console.log('\\nüè∑Ô∏è R√©partition par cat√©gorie:');",
													"    Object.entries(stats.categoryExpenses)",
													"        .sort(([,a], [,b]) => b - a)",
													"        .forEach(([category, amount]) => {",
													"            const percentage = ((amount / stats.totalExpenses) * 100).toFixed(1);",
													"            console.log(`  ‚Ä¢ ${category}: ${amount} EUR (${percentage}%)`);",
													"        });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/statistics/categories?startDate=2024-01-01&endDate=2024-12-31",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "statistics", "categories"],
											"query": [
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-12-31"
												}
											]
										}
									}
								},
								{
									"name": "Get Expenses by Category (Last 3 Months)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/statistics/categories?startDate=2024-03-01&endDate=2024-06-01",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "statistics", "categories"],
											"query": [
												{
													"key": "startDate",
													"value": "2024-03-01"
												},
												{
													"key": "endDate",
													"value": "2024-06-01"
												}
											]
										}
									}
								},
								{
									"name": "Get Cash Flow Analysis (Current Year)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Cash flow statistics retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const stats = pm.response.json();",
													"    pm.expect(stats).to.have.property('totalIncome');",
													"    pm.expect(stats).to.have.property('totalExpenses');",
													"    pm.expect(stats).to.have.property('netCashFlow');",
													"    pm.expect(stats).to.have.property('savingsRate');",
													"});",
													"",
													"const stats = pm.response.json();",
													"console.log('üí∞ ANALYSE CASH FLOW');",
													"console.log('=' .repeat(25));",
													"console.log(`üìÖ P√©riode: ${stats.period.startDate} ‚Üí ${stats.period.endDate}`);",
													"console.log(`‚¨ÜÔ∏è Revenus totaux: +${stats.totalIncome} EUR`);",
													"console.log(`‚¨áÔ∏è D√©penses totales: -${stats.totalExpenses} EUR`);",
													"console.log(`üíé Cash flow net: ${stats.netCashFlow} EUR`);",
													"console.log(`üìä Taux d'√©pargne: ${stats.savingsRate}%`);",
													"",
													"// Analyse qualitative",
													"const netFlow = parseFloat(stats.netCashFlow);",
													"const savingsRate = parseFloat(stats.savingsRate);",
													"",
													"console.log('\\nüéØ √âVALUATION:');",
													"if (netFlow > 0) {",
													"    console.log('‚úÖ Situation financi√®re positive');",
													"} else {",
													"    console.log('‚ö†Ô∏è D√©ficit financier d√©tect√©');",
													"}",
													"",
													"if (savingsRate >= 20) {",
													"    console.log('üåü Excellent taux d\\'√©pargne');",
													"} else if (savingsRate >= 10) {",
													"    console.log('üëç Bon taux d\\'√©pargne');",
													"} else if (savingsRate >= 0) {",
													"    console.log('‚ö° Taux d\\'√©pargne √† am√©liorer');",
													"} else {",
													"    console.log('üö® √âpargne n√©gative - Action requise');",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/statistics/cash-flow?startDate=2024-01-01&endDate=2024-12-31",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "statistics", "cash-flow"],
											"query": [
												{
													"key": "startDate",
													"value": "2024-01-01"
												},
												{
													"key": "endDate",
													"value": "2024-12-31"
												}
											]
										}
									}
								},
								{
									"name": "Get Cash Flow Analysis (Last Month)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/statistics/cash-flow?startDate=2024-05-01&endDate=2024-05-31",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "statistics", "cash-flow"],
											"query": [
												{
													"key": "startDate",
													"value": "2024-05-01"
												},
												{
													"key": "endDate",
													"value": "2024-05-31"
												}
											]
										}
									}
								}
							]
						}
					]
				},
				{
					"name": "üîî 5. Webhooks & Monitoring",
					"description": "Tests des webhooks et monitoring du syst√®me bancaire",
					"item": [
						{
							"name": "üîó Webhook Endpoints",
							"item": [
								{
									"name": "Webhook Health Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Webhook service healthy', function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property('status');",
													"    pm.expect(response.status).to.eql('healthy');",
													"});",
													"",
													"const response = pm.response.json();",
													"console.log('üîî Webhook service status:', response.status);",
													"console.log('üïê Timestamp:', response.timestamp);"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/banking/webhooks/health",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "webhooks", "health"]
										}
									}
								},
								{
									"name": "Test Budget Insight Webhook - Connection Synced",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Webhook processed successfully', function () {",
													"    pm.expect([200, 401]).to.include(pm.response.code);",
													"});",
													"",
													"if (pm.response.code === 200) {",
													"    console.log('‚úÖ Webhook Budget Insight trait√© avec succ√®s');",
													"} else if (pm.response.code === 401) {",
													"    console.log('üîê Signature webhook invalide (attendu en mode test)');",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Webhook-Signature",
												"value": "sha256=test_signature_budget_insight"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"connection.synced\",\n    \"connection_id\": \"bi_test_connection_123456\",\n    \"timestamp\": \"2024-06-03T14:30:00Z\",\n    \"data\": {\n        \"accounts_synced\": 3,\n        \"transactions_synced\": 157,\n        \"sync_duration_ms\": 2340,\n        \"status\": \"success\"\n    },\n    \"metadata\": {\n        \"provider\": \"budget-insight\",\n        \"user_id\": \"temp_user_789\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/webhooks/budget-insight",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "webhooks", "budget-insight"]
										}
									}
								},
								{
									"name": "Test Budget Insight Webhook - Connection Error",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Webhook-Signature",
												"value": "sha256=test_signature_budget_insight_error"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"connection.error\",\n    \"connection_id\": \"bi_test_connection_error_456\",\n    \"timestamp\": \"2024-06-03T14:35:00Z\",\n    \"error\": {\n        \"code\": \"AUTHENTICATION_FAILED\",\n        \"message\": \"Invalid credentials provided\",\n        \"retry_possible\": true\n    },\n    \"metadata\": {\n        \"provider\": \"budget-insight\",\n        \"bank_name\": \"Cr√©dit Agricole\",\n        \"attempt_count\": 3\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/webhooks/budget-insight",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "webhooks", "budget-insight"]
										}
									}
								},
								{
									"name": "Test Bridge API Webhook - Account Updated",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Bridge-Signature",
												"value": "sha256=test_signature_bridge_api"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\": \"account.updated\",\n    \"item_id\": \"bridge_item_789123\",\n    \"account_id\": \"bridge_account_456789\",\n    \"timestamp\": \"2024-06-03T14:40:00Z\",\n    \"changes\": {\n        \"balance\": {\n            \"old_value\": 245075,\n            \"new_value\": 243521,\n            \"currency\": \"EUR\"\n        },\n        \"last_transaction_date\": \"2024-06-03\"\n    },\n    \"metadata\": {\n        \"provider\": \"bridge-api\",\n        \"bank_name\": \"Soci√©t√© G√©n√©rale\",\n        \"account_type\": \"checking\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/webhooks/bridge-api",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "webhooks", "bridge-api"]
										}
									}
								},
								{
									"name": "Test Linxo Webhook - Transaction Created",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Linxo-Signature",
												"value": "sha256=test_signature_linxo_connect"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"event\": \"transaction.created\",\n    \"connection_id\": \"linxo_connection_987654\",\n    \"account_id\": \"linxo_account_123789\",\n    \"transaction\": {\n        \"id\": \"linxo_tx_456123789\",\n        \"amount\": -4567,\n        \"description\": \"ACHAT CARTE CARREFOUR MARKET\",\n        \"date\": \"2024-06-03\",\n        \"category\": \"alimentation\",\n        \"type\": \"debit\"\n    },\n    \"timestamp\": \"2024-06-03T14:45:00Z\",\n    \"metadata\": {\n        \"provider\": \"linxo-connect\",\n        \"bank_name\": \"Cr√©dit Mutuel\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/webhooks/linxo",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "webhooks", "linxo"]
										}
									}
								}
							]
						},
						{
							"name": "üìä System Monitoring",
							"item": [
								{
									"name": "Get Banking System Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Banking status retrieved', function () {",
													"    pm.response.to.have.status(200);",
													"    const status = pm.response.json();",
													"    pm.expect(status).to.have.property('totalConnections');",
													"    pm.expect(status).to.have.property('activeConnections');",
													"    pm.expect(status).to.have.property('totalAccounts');",
													"});",
													"",
													"const status = pm.response.json();",
													"console.log('üè¶ STATUT SYST√àME BANCAIRE');",
													"console.log('=' .repeat(30));",
													"console.log(`üîó Connexions totales: ${status.totalConnections}`);",
													"console.log(`‚úÖ Connexions actives: ${status.activeConnections}`);",
													"console.log(`üí≥ Comptes totaux: ${status.totalAccounts}`);",
													"",
													"if (status.lastSyncAt) {",
													"    console.log(`‚è∞ Derni√®re sync: ${status.lastSyncAt}`);",
													"}",
													"",
													"// Health indicators",
													"const healthScore = status.totalConnections > 0 ? (status.activeConnections / status.totalConnections * 100).toFixed(1) : 0;",
													"console.log(`üìä Score de sant√©: ${healthScore}%`);",
													"",
													"if (healthScore >= 80) {",
													"    console.log('üíö Syst√®me en excellente sant√©');",
													"} else if (healthScore >= 60) {",
													"    console.log('üíõ Syst√®me en bonne sant√©');",
													"} else if (healthScore >= 40) {",
													"    console.log('üß° Syst√®me n√©cessite attention');",
													"} else {",
													"    console.log('‚ù§Ô∏è Syst√®me n√©cessite intervention');",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/status",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "status"]
										}
									}
								},
								{
									"name": "Application Health Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Application is healthy', function () {",
													"    pm.response.to.have.status(200);",
													"    const health = pm.response.json();",
													"    pm.expect(health.status).to.eql('UP');",
													"});",
													"",
													"const health = pm.response.json();",
													"console.log('üè• APPLICATION HEALTH');",
													"console.log('=' .repeat(25));",
													"console.log(`üìä Status: ${health.status}`);",
													"",
													"if (health.components) {",
													"    console.log('\\nüîç Composants:');",
													"    Object.entries(health.components).forEach(([component, details]) => {",
													"        const status = details.status || 'UNKNOWN';",
													"        const icon = status === 'UP' ? '‚úÖ' : '‚ùå';",
													"        console.log(`  ${icon} ${component}: ${status}`);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/actuator/health",
											"host": ["{{base_url}}"],
											"path": ["actuator", "health"]
										}
									}
								}
							]
						}
					]
				},
				{
					"name": "üß™ 6. Test Scenarios",
					"description": "Sc√©narios de test complets pour validation E2E",
					"item": [
						{
							"name": "üöÄ Complete Banking Flow Test",
							"item": [
								{
									"name": "1. Setup Mock Connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Step 1: Mock connection setup', function () {",
													"    pm.expect([201, 409]).to.include(pm.response.code);",
													"});",
													"",
													"if (pm.response.code === 201) {",
													"    const response = pm.response.json();",
													"    pm.globals.set('test_connection_id', response.id);",
													"    console.log('üöÄ Step 1/6: Mock connection created');",
													"} else {",
													"    console.log('üöÄ Step 1/6: Using existing connection');",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"provider\": \"mock\",\n    \"bankCredentials\": {\n        \"login\": \"test_e2e@mosaique.com\",\n        \"password\": \"E2E_Test_Password_123!\"\n    }\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections"]
										}
									}
								},
								{
									"name": "2. Confirm Connection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Step 2: Connection confirmed', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"console.log('üöÄ Step 2/6: Connection confirmed and activated');"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"confirmationCode\": \"E2E123\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{test_connection_id}}/confirm",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{test_connection_id}}", "confirm"]
										}
									}
								},
								{
									"name": "3. Sync Connection Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Step 3: Data synchronized', function () {",
													"    pm.response.to.have.status(200);",
													"    const syncResult = pm.response.json();",
													"    pm.expect(syncResult.success).to.be.true;",
													"});",
													"",
													"const syncResult = pm.response.json();",
													"console.log(`üöÄ Step 3/6: Synced ${syncResult.accountsSynced} accounts, ${syncResult.transactionsSynced} transactions`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{test_connection_id}}/sync",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{test_connection_id}}", "sync"]
										}
									}
								},
								{
									"name": "4. Verify Accounts Created",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Step 4: Accounts verified', function () {",
													"    pm.response.to.have.status(200);",
													"    const accounts = pm.response.json();",
													"    pm.expect(accounts.length).to.be.above(0);",
													"});",
													"",
													"const accounts = pm.response.json();",
													"console.log(`üöÄ Step 4/6: Verified ${accounts.length} accounts available`);",
													"if (accounts.length > 0) {",
													"    pm.globals.set('test_account_id', accounts[0].id);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/connections/{{test_connection_id}}/accounts",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "connections", "{{test_connection_id}}", "accounts"]
										}
									}
								},
								{
									"name": "5. Test Transaction Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Step 5: Transactions searchable', function () {",
													"    pm.response.to.have.status(200);",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.have.property('content');",
													"});",
													"",
													"const response = pm.response.json();",
													"console.log(`üöÄ Step 5/6: Found ${response.totalElements} transactions in search`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accountId\": {{test_account_id}},\n    \"page\": 0,\n    \"size\": 10,\n    \"sortBy\": \"transactionDate\",\n    \"sortDirection\": \"DESC\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/search",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "search"]
										}
									}
								},
								{
									"name": "6. Verify Financial Summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Step 6: Financial summary complete', function () {",
													"    pm.response.to.have.status(200);",
													"    const summary = pm.response.json();",
													"    pm.expect(summary).to.have.property('totalBalance');",
													"    pm.expect(summary).to.have.property('totalAccounts');",
													"});",
													"",
													"const summary = pm.response.json();",
													"console.log('üöÄ Step 6/6: Financial summary verified');",
													"console.log('');",
													"console.log('üéâ BANKING E2E TEST COMPLETED SUCCESSFULLY!');",
													"console.log('‚úÖ All 6 steps passed');",
													"console.log(`üìä Final summary: ${summary.totalAccounts} accounts, ${summary.totalBalance} EUR`);",
													"console.log('=' .repeat(50));"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/summary",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "summary"]
										}
									}
								}
							]
						},
						{
							"name": "‚ö° Performance Tests",
							"item": [
								{
									"name": "Load Test - Multiple Provider Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Response time acceptable', function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);",
													"});",
													"",
													"pm.test('Rate limiting working', function () {",
													"    if (pm.response.code === 429) {",
													"        pm.test('Rate limit headers present', function() {",
													"            pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.exist;",
													"        });",
													"        console.log('üö¶ Rate limiting triggered (expected behavior)');",
													"    } else {",
													"        console.log(`‚ö° Response time: ${pm.response.responseTime}ms`);",
													"    }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											}
										],
										"url": {
											"raw": "{{base_url}}/api/banking/providers",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "providers"]
										}
									}
								},
								{
									"name": "Stress Test - Large Transaction Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Large search handled efficiently', function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(10000);",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"console.log(`‚ö° Large search response time: ${pm.response.responseTime}ms`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{jwt_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"page\": 0,\n    \"size\": 500,\n    \"sortBy\": \"transactionDate\",\n    \"sortDirection\": \"DESC\",\n    \"startDate\": \"2023-01-01\",\n    \"endDate\": \"2024-12-31\"\n}"
										},
										"url": {
											"raw": "{{base_url}}/api/banking/transactions/search",
											"host": ["{{base_url}}"],
											"path": ["api", "banking", "transactions", "search"]
										}
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "üéØ Portfolio Analysis",
			"item": [
				{
					"name": "Get Portfolio Summary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/portfolio/summary",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"portfolio",
								"summary"
							]
						}
					}
				},
				{
					"name": "Get Portfolio Distribution",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "http://localhost:9999/api/portfolio/distribution",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9999",
							"path": [
								"api",
								"portfolio",
								"distribution"
							]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		}
	]
}